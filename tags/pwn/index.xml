<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Pwn - 标签 - J-shiro's Blog</title><link>https://j-shiro.github.io/tags/pwn/</link><description>Pwn - 标签 - J-shiro's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 19 Nov 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://j-shiro.github.io/tags/pwn/" rel="self" type="application/rss+xml"/><item><title>glibc源码分析</title><link>https://j-shiro.github.io/source_analyze/</link><pubDate>Tue, 19 Nov 2024 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/source_analyze/</guid><description><![CDATA[<h2 id="heap">Heap</h2>
<h3 id="结构">结构</h3>
<h4 id="malloc_par">malloc_par</h4>
<p><code>malloc.c</code>中，记录堆管理器的相关参数</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">malloc_par</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">trim_threshold</span><span class="p">;</span> <span class="c1">// 收缩阈值 默认128KB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  	用于控制main_arena中保留的内存量
</span></span></span><span class="line"><span class="cl"><span class="cm">  	当释放的chunk为mmap获得的，同时大小大于mmap_threshold，更新mmap_threshold同时将trim_threshold乘2;
</span></span></span><span class="line"><span class="cl"><span class="cm">  	当释放的chunk大小在 fast bin 范围内，合并完 size 大于 FASTBIN_CONSOLIDATION_THRESHOLD:0x10000，根据该字段缩小 top chunk
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERNAL_SIZE_T</span> <span class="n">top_pad</span><span class="p">;</span>			<span class="c1">// 初始化或扩展堆时申请内存是否添加额外pad，默认为0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    								<span class="c1">// 调用sbrk函数时在原有请求大小上添加的一个值，是一个填充
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">INTERNAL_SIZE_T</span> <span class="n">mmap_threshold</span><span class="p">;</span>	<span class="c1">// mmap分配阈值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">  	决定sysmalloc用mmap还是sbrk分配内存界限, &gt;则mmap, &lt;则sbrk,
</span></span></span><span class="line"><span class="cl"><span class="cm">  	若释放的内存通过mmap得到的, 则mmap_threshold与该内存大小取max, 且该值最大不超过DEFAULT_MMAP_THRESHOLD_MAX:0x2000000
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERNAL_SIZE_T</span> <span class="n">arena_test</span><span class="p">;</span> <span class="c1">// 最小分配区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">INTERNAL_SIZE_T</span> <span class="n">arena_max</span><span class="p">;</span>  <span class="c1">// 最大分配区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">n_mmaps</span><span class="p">;</span>			<span class="c1">// mmap分配的内存数量, mmap一次+1, munmap一次-1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">n_mmaps_max</span><span class="p">;</span>		<span class="c1">// 最多能mmap的内存数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">max_n_mmaps</span><span class="p">;</span>		<span class="c1">// n_mmaps达到过的最大值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">no_dyn_threshold</span><span class="p">;</span>	<span class="c1">// 是否开启mmap分配阈值动态调整，默认为0开启
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl">  <span class="n">INTERNAL_SIZE_T</span> <span class="n">mmapped_mem</span><span class="p">;</span>		<span class="c1">// 当前 mmap 分配的内存大小总和
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="cm">/*INTERNAL_SIZE_T  sbrked_mem;*/</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/*INTERNAL_SIZE_T  max_sbrked_mem;*/</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERNAL_SIZE_T</span> <span class="n">max_mmapped_mem</span><span class="p">;</span>	<span class="c1">// mmap 的内存大小总和达到过的最大值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">INTERNAL_SIZE_T</span> <span class="n">max_total_mem</span><span class="p">;</span>  <span class="c1">// 单线程情况下统计进程分配的内存总数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">sbrk_base</span><span class="p">;</span> <span class="c1">// brk系统调用申请的heap区域的起始地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span></span></span></code></pre></div></div>
<p>该结构体类型实例<code>mp_</code>来记录ptmalloc参数</p>]]></description></item><item><title>PWN</title><link>https://j-shiro.github.io/pwn_note/</link><pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/pwn_note/</guid><description><![CDATA[<h2 id="工具">工具</h2>
<h3 id="docker">Docker</h3>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-Bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Bash" data-lang="Bash"><span class="line"><span class="cl">docker pull xxx/xxx:last <span class="c1"># 拉取docker镜像</span>
</span></span><span class="line"><span class="cl">docker images <span class="c1"># 查看镜像</span>
</span></span><span class="line"><span class="cl">docker rmi &lt;CONTAINER IMAGE ID&gt; <span class="c1"># 删除镜像</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">docker start &lt;CONTAINER ID&gt; <span class="c1"># 开启容器</span>
</span></span><span class="line"><span class="cl">docker stop &lt;CONTAINER ID&gt;  <span class="c1"># 关闭容器</span>
</span></span><span class="line"><span class="cl">docker ps -a <span class="c1"># 查看容器</span>
</span></span><span class="line"><span class="cl">docker rm -f &lt;CONTAINER ID&gt; <span class="c1"># 删除容器</span></span></span></code></pre></div></div>
<p><strong>生成容器</strong></p>]]></description></item></channel></rss>