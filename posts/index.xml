<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>所有文章 - J-shiro's Blog</title><link>https://j-shiro.github.io/posts/</link><description>所有文章 | J-shiro's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 27 May 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://j-shiro.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Java</title><link>https://j-shiro.github.io/java/</link><pubDate>Tue, 27 May 2025 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/java/</guid><description><![CDATA[<h2 id="概述">概述</h2>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-java">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-java" data-lang="java"><span class="line"><span class="cl"><span class="kd">public</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Xxxx</span><span class="w"> </span><span class="p">{</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">	</span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span></span></span></code></pre></div></div>
<p><strong>概念</strong></p>
<ul>
<li><code>javac</code>编译，<code>java</code>执行，<code>javap xxx.class</code>反编译，<code>jre</code>：核心类库 + <code>jvm</code></li>
<li>大小写敏感</li>
</ul>
<h3 id="工具">工具</h3>
<p><strong>IDEA</strong></p>]]></description></item><item><title>C++</title><link>https://j-shiro.github.io/c/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/c/</guid><description><![CDATA[<h2 id="环境">环境</h2>
<h3 id="编译">编译</h3>
<ul>
<li><code>gcc</code>主要编译C语言，对于C++代码只编译而不自动链接C++标准库，需要使用<code>-lstdc++</code>指定</li>
<li><code>g++</code>专门编译C++代码，自动链接C++标准库</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">./a.out &lt;infile&gt; outfile <span class="c1"># 文件重定向, infile文件中为输入</span></span></span></code></pre></div></div>
<h2 id="基础">基础</h2>
<h3 id="关键字">关键字</h3>
<p><strong>extern</strong>：只声明变量，由外部定义</p>]]></description></item><item><title>GO</title><link>https://j-shiro.github.io/go/</link><pubDate>Sat, 25 Jan 2025 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/go/</guid><description><![CDATA[<ul>
<li>Google开发，高性能，高并发，静态编译，垃圾回收，标准库丰富，跨平台</li>
</ul>
<h2 id="环境">环境</h2>
<p><strong>编译运行</strong></p>
<p><code>GOPATH</code>下包含目录<code>bin</code>(存放编译后的二进制文件)、<code>pkg</code>(存放编译后的库文件)、<code>src</code>(存放源码文件)</p>]]></description></item><item><title>GIT</title><link>https://j-shiro.github.io/git/</link><pubDate>Tue, 14 Jan 2025 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/git/</guid><description><![CDATA[<h2 id="命令">命令</h2>
<p>先 commit 一次后才会真正创建 master 分支</p>
<p>从 git 服务器拉取完整仓库代码</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone xxx.git</span></span></code></pre></div></div>
<p>配置开发者用户和邮箱，代码每次提交包含配置</p>
<div class="code-block code-line-numbers" style="counter-reset: code-block 0">
    <div class="code-header language-bash">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git config user.name xxx
</span></span><span class="line"><span class="cl">git config user.email xx@xx.com
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">cat .git/config <span class="c1"># 查看配置</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">git config --list <span class="c1"># 获取所有 git 配置</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 配置代理</span>
</span></span><span class="line"><span class="cl">git config --global http.proxy 127.0.0.1:7890
</span></span><span class="line"><span class="cl">git config --global https.proxy 127.0.0.1:7890
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 查看代理</span>
</span></span><span class="line"><span class="cl">git config --global --get http.proxy
</span></span><span class="line"><span class="cl">git config --global --get https.proxy
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 取消</span>
</span></span><span class="line"><span class="cl">git config --global --unset http.proxy
</span></span><span class="line"><span class="cl">git config --global --unset https.proxy</span></span></code></pre></div></div>
<p>查看文件变动状态</p>]]></description></item><item><title>glibc源码分析</title><link>https://j-shiro.github.io/source_analyze/</link><pubDate>Tue, 19 Nov 2024 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/source_analyze/</guid><description><![CDATA[<h2 id="heap">Heap</h2>
<h3 id="结构">结构</h3>
<h4 id="malloc_par">malloc_par</h4>
<p><code>malloc.c</code>中，记录堆管理器的相关参数</p>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-c">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="k">struct</span> <span class="n">malloc_par</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">trim_threshold</span><span class="p">;</span> <span class="c1">// 收缩阈值 默认128KB
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  	用于控制main_arena中保留的内存量
</span></span></span><span class="line"><span class="cl"><span class="cm">  	当释放的chunk为mmap获得的，同时大小大于mmap_threshold，更新mmap_threshold同时将trim_threshold乘2;
</span></span></span><span class="line"><span class="cl"><span class="cm">  	当释放的chunk大小在 fast bin 范围内，合并完 size 大于 FASTBIN_CONSOLIDATION_THRESHOLD:0x10000，根据该字段缩小 top chunk
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERNAL_SIZE_T</span> <span class="n">top_pad</span><span class="p">;</span>			<span class="c1">// 初始化或扩展堆时申请内存是否添加额外pad，默认为0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    								<span class="c1">// 调用sbrk函数时在原有请求大小上添加的一个值，是一个填充
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">INTERNAL_SIZE_T</span> <span class="n">mmap_threshold</span><span class="p">;</span>	<span class="c1">// mmap分配阈值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="cm">/* 
</span></span></span><span class="line"><span class="cl"><span class="cm">  	决定sysmalloc用mmap还是sbrk分配内存界限, &gt;则mmap, &lt;则sbrk,
</span></span></span><span class="line"><span class="cl"><span class="cm">  	若释放的内存通过mmap得到的, 则mmap_threshold与该内存大小取max, 且该值最大不超过DEFAULT_MMAP_THRESHOLD_MAX:0x2000000
</span></span></span><span class="line"><span class="cl"><span class="cm">  */</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERNAL_SIZE_T</span> <span class="n">arena_test</span><span class="p">;</span> <span class="c1">// 最小分配区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">INTERNAL_SIZE_T</span> <span class="n">arena_max</span><span class="p">;</span>  <span class="c1">// 最大分配区
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">n_mmaps</span><span class="p">;</span>			<span class="c1">// mmap分配的内存数量, mmap一次+1, munmap一次-1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">n_mmaps_max</span><span class="p">;</span>		<span class="c1">// 最多能mmap的内存数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="kt">int</span> <span class="n">max_n_mmaps</span><span class="p">;</span>		<span class="c1">// n_mmaps达到过的最大值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">  <span class="kt">int</span> <span class="n">no_dyn_threshold</span><span class="p">;</span>	<span class="c1">// 是否开启mmap分配阈值动态调整，默认为0开启
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl">  <span class="n">INTERNAL_SIZE_T</span> <span class="n">mmapped_mem</span><span class="p">;</span>		<span class="c1">// 当前 mmap 分配的内存大小总和
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="cm">/*INTERNAL_SIZE_T  sbrked_mem;*/</span>
</span></span><span class="line"><span class="cl">  <span class="cm">/*INTERNAL_SIZE_T  max_sbrked_mem;*/</span>
</span></span><span class="line"><span class="cl">  <span class="n">INTERNAL_SIZE_T</span> <span class="n">max_mmapped_mem</span><span class="p">;</span>	<span class="c1">// mmap 的内存大小总和达到过的最大值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="n">INTERNAL_SIZE_T</span> <span class="n">max_total_mem</span><span class="p">;</span>  <span class="c1">// 单线程情况下统计进程分配的内存总数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl">  <span class="kt">char</span> <span class="o">*</span><span class="n">sbrk_base</span><span class="p">;</span> <span class="c1">// brk系统调用申请的heap区域的起始地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">};</span></span></span></code></pre></div></div>
<p>该结构体类型实例<code>mp_</code>来记录ptmalloc参数</p>]]></description></item><item><title>LangChain</title><link>https://j-shiro.github.io/langchain_note/</link><pubDate>Fri, 01 Nov 2024 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/langchain_note/</guid><description><![CDATA[<h2 id="基本知识">基本知识</h2>
<ul>
<li>
<p>LangChain是一个基于大语言模型（LLMs）用于构建端到端语言模型应用的框架</p>
</li>
<li>
<p>组件：模型（Models）、提示模板（Prompts）、数据检索（Indexes）、记忆（Memory）、链（Chains）、代理（Agents）</p>]]></description></item><item><title>论文阅读记录</title><link>https://j-shiro.github.io/record_thesis/</link><pubDate>Thu, 24 Oct 2024 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/record_thesis/</guid><description><![CDATA[<table>
  <thead>
      <tr>
          <th>论文</th>
          <th>开源</th>
          <th>阅读状态</th>
          <th>是否复现</th>
          <th>类型</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>LLM-Fuzzer: Scaling Assessment of Large Language Model Jailbreaks</td>
          <td><a href="https://github.com/sherdencooper/GPTFuzz" target="_blank" rel="noopener noreffer ">https://github.com/sherdencooper/GPTFuzz</a></td>
          <td>sc</td>
          <td>n</td>
          <td>大模型模糊测试</td>
      </tr>
      <tr>
          <td>FairECom: Towards Proof of E-Commerce Fairness Against Price Discrimination</td>
          <td><a href="https://github.com/CyberSec-Dev/FairECom" target="_blank" rel="noopener noreffer ">https://github.com/CyberSec-Dev/FairECom</a></td>
          <td>pc</td>
          <td>n</td>
          <td>价格歧视规避</td>
      </tr>
      <tr>
          <td>PyRTFuzz: Detecting Bugs in Python Runtimes via Two-Level Collaborative Fuzzing</td>
          <td><a href="https://github.com/awen-li/PyRTFuzz" target="_blank" rel="noopener noreffer ">https://github.com/awen-li/PyRTFuzz</a></td>
          <td>n</td>
          <td>n</td>
          <td>Python模糊测试</td>
      </tr>
      <tr>
          <td>Towards Robust Detection of Open Source Software Supply Chain Poisoning Attacks in Industry Environments</td>
          <td>-</td>
          <td>fc</td>
          <td>n</td>
          <td>软件供应链投毒攻击检测</td>
      </tr>
      <tr>
          <td>Cognitive Bias in Decision-Making with LLMs</td>
          <td><a href="https://huggingface.co/datasets/jecht/cognitive_bias" target="_blank" rel="noopener noreffer ">https://huggingface.co/datasets/jecht/cognitive_bias</a> 数据集</td>
          <td>fc</td>
          <td>n</td>
          <td>大模型认知偏差检测</td>
      </tr>
      <tr>
          <td>Generative AI for Game Theory-based Mobile Networking</td>
          <td>-</td>
          <td>fc</td>
          <td>n</td>
          <td>博弈论，生成式AI</td>
      </tr>
  </tbody>
</table>
<p>阅读状态：fc(Fully completed), sc(Substantially completed), pc(Partially completed)</p>]]></description></item><item><title>计算机视觉</title><link>https://j-shiro.github.io/cv_note/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/cv_note/</guid><description><![CDATA[<h2 id="概念">概念</h2>
<h3 id="垂直边缘检测">垂直边缘检测</h3>
<ul>
<li>灰度图</li>
</ul>

<p><strong>N x N * f x f = ( N - f + 1 ) * ( N - f + 1)</strong>，f 基本为奇数</p>

<p><strong>滤波器/卷积核</strong></p>
<ul>
<li><code>Sobel</code>过滤器：强调方向，垂直方向，中间权重为2</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>[-1, 0, 1]
[-2, 0, 2]
[-1, 0, 1]</code></pre></div>
<ul>
<li><code>Scharr</code>过滤器：更平滑</li>
</ul>
<div class="code-block code-line-numbers open" style="counter-reset: code-block 0">
    <div class="code-header language-">
        <span class="code-title"><i class="arrow fas fa-angle-right fa-fw" aria-hidden="true"></i></span>
        <span class="ellipses"><i class="fas fa-ellipsis-h fa-fw" aria-hidden="true"></i></span>
        <span class="copy" title="复制到剪贴板"><i class="far fa-copy fa-fw" aria-hidden="true"></i></span>
    </div><pre tabindex="0"><code>[-3, 0, 3]
[-10, 0, 10]
[-3, 0, 3]</code></pre></div>
<p><strong>padding填充</strong></p>]]></description></item><item><title>强化学习</title><link>https://j-shiro.github.io/reinforcement_learning_note/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/reinforcement_learning_note/</guid><description><![CDATA[<h2 id="概念">概念</h2>
<p>要素：$state\overset{policy}\longrightarrow action$</p>
<p><strong>奖励函数</strong></p>
<ul>
<li>
<p>Reward Function，衡量智能体某个状态 s 下采取动作 a 后获得的即时反馈</p>]]></description></item><item><title>深度学习</title><link>https://j-shiro.github.io/deep_learning_note/</link><pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate><author>jshiro</author><guid>https://j-shiro.github.io/deep_learning_note/</guid><description><![CDATA[<h2 id="神经网络">神经网络</h2>
<p><strong>整体框架</strong></p>

<p><strong>特点</strong></p>
<ul>
<li>堆叠：$f=W_3max(0,W_2max(0,W_1x))$，参数极多</li>
<li>神经元个数影响：神经元多，分类效果好</li>
<li>参数个数影响：参数多，拟合高</li>
<li>极大神经网络在适当正则化下不损害性能，拥有低偏差：惩罚力度小，拟合高；惩罚力度大，平稳</li>
<li>停滞区（plateaus）使学习过程慢</li>
</ul>
<p><strong>参数随机初始化</strong></p>]]></description></item></channel></rss>